Doubly-Linked-List Design spec:
	I used a circularly doubly-linked list for my implementation. The empty list consists of a nullptr head. The single list consists of the head pointing to a signle item that is
	pointing to itself in both directions. The list that is more than one element long consists of the head pointing to a node that is pointing to the last node behind it and the
	second node in front of it.
	I found this implementation useful in avoiding checks for nullptrs and quick insertion and deletion.

Pseudo-Code
	Erase:
		if my list contains the node that has the key:
			get a pointer to the node
			if the node is the only node in the list delete it
			else
				if the head is pointing to the node to be deleted move the head
				make the previous point to the next and the next to the previous
				delete the node
				subtract one from the amount of pairs we have
				return true
		else
			return false


	reassign:
		set the result equal to the input
		go through the input 2 at a time starting at the beginning and update the latter item value to equal the previous items value
		when you get to the end make the first item value equal the original last item value
	Insert:
		if my map doesnt contain the key
			make a new node with proper values
			if the list is empty
				just make the head point to the node
			if the list only has one node
				make the node point in both directions to the head and the head point in both directions to the node
			if the list has more than one node
				make the node go behind the head
				as if it is replacing the end of the list
			increase the amount of pairs and return true
		return false


Test Cases:
	Map m; //default constructor
	assert(m.size() == 0); //size is accurate
	assert(m.empty());
	assert(m.erase("don't erase me") == false) //doesnt erase non-member function
	assert(m.size() == 0); //doesnt change size
	KeyType k;
	ValueType v;
	assert(!(m.get(0,k,v))); //cant get something you dont have
	k = "vik";
	v =  1;
	assert(m.insert(k,v)); //can insert
	assert(m.insert("roe", 2));
	assert(m.insert("joe", 3));
	assert(m.size() == 3); //updates size
	assert(m.update("vik", 4));
	assert(m.insertOrUpdate("sim", 1)); //works
	assert(!m.empty()); // isnt empty
	Map m2;
	m2 = m; // assignment operator
	Map m3 = m; //copy constructor
	assert(m2.size() == m.size() && m3.size() == m.size()); //they should all be equal
	assert(m.erase("vik")); // one should be smaller
	assert(m.size() == m2.size()-1); // check
	reassign(m, m2); //see if this works
	assert(m2.size() == m.size()); // they have the same size thats good
	KeyType k2;
	ValueType v2;
	for(int i = 0; i < m.size(); i++){
		m.get(i, k, v);
		m2.get(i, k2, v2);
		assert((k == k2) && (v != v2)); //make sure that they have the same keys but different values
	}
	assert(!merge(m2, m3, m)); //merging m2 and m3 should make issues because m3 and m2 have the same keys but diffferent values
	Map M1;
	Map M2;
	for(int i = 0; i < 100; i++){
		M1.insert(to_string(i),i); // able to handle bulk insertions
		M2.insert(to_string(-i),-i); // two different maps
	}

	assert(M1.insert("Fred", 123)); //basic insertion
	assert(M1.insert("Ethel", 456)); //basic insertion
	assert(M1.size() == 102); //bulk size works
	ValueType v = 42;
	assert(!M1.get("Lucy", v)  &&  v == 42); // lucy is not in map
	assert(M1.get("Fred", v)  &&  v == 123); // fred is in map and value is 123
	Map M3;
	reassign(M1, M3); // reassignment check
	for(int i = 0; i < 100; i++){
		KeyType key = "noKey";
		ValueType value = 0;
		KeyType k1;
		ValueType v1;
		M1.get(i, k1, v1);
		M3.get(i, key, value);
		cout << "M3: " << key << " " << value << " M1: " << k1 << ' ' << v1 << endl;
	} //check the first 100 values of M1 and M3 and compare them - since M3 is reassignmed from M1 they should have same keys different values
	Merge(M1,M2,M3); //new 200 item list
	for(int i = 0; i < 209; i++){
		KeyType key = "noKey";
		ValueType value = 0;
		KeyType k1;
		ValueType v1;
		M1.get(i, k1, v1);
		M3.get(i, key, value);
		cout << "M3: " << key << " " << value << " M1: " << k1 << ' ' << v1 << endl;//print all 202 elements ish and go over a little bit for good measure
	}

