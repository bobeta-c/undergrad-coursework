Question 1.
	e.
		test 3 fails because the  iterator is no longer valid after elements have been pushed onto the vector.
		The Vector may have rescaled or moved and is no longer guaranteed to be in the same place.
Question 3.
	the call to map<Coord, int>::insert causes a compilation error because map<KeyType, ValueType> makes a call comparing two KeyType objects using the == and > operator which are both undefined for the Coord object type. This makes the call to insert undefined and thus causes a compilation error.
Question 4.
	b.
		This Problem could not be solved with only a single constraint because the function would not 
		have a way of knowing if it has to print out the final endl;
Question 5.
	a.
		O(N^3). Iterates and uses a constant number of operators on a N length array N times N more times. Thus c*N*N*N operations occur leading to an O(N^3) algorithm.
	b.
		O(N^3). iterates N, 2N, 3N, ... N^2 operations times some constant of proportionality. The formula for this sum is O(N^3) thus even though there are less operations the number of operations is still on the order of N^3.
Question 6.
	a.
		O(N^2). Iterates N times and each time does a get(i, k, v) and insert(k, v) call which are both O(N) algorithms. This combined with the iterative process creates an O(N^2) algorithm.
	b.
		O(N). Iterates through every element once making the swaps in place rather than going through the entire list to find the element to get and then going through the entire list to find the new place to put it. This implementation is neither better or worse than the other because it is accomplishing a different task, this implementation is not capable of reassigning to another map, however in the case of reassigning a map to itself, this implementation is far more efficient.
