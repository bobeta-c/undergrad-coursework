Notable Obstacles:
The only notable obstacle I had to overcome was determining proper error cases for each program.
Test Cases:

reduplicate
	- len array return -1 - the base case
	regular array return n - the regular case - should be the same for all of them
locate
	- len array return -1 - the base case
	array with element - the regular case
	array without element - should return -1
	array with element and different casing - should return as if the element does not exist
	array with element multiple times - should return the first occurance of the element
locationOfMax
	- len array return -1 - the base case
	array with regular elements - the regular case should return as expected
	array with repeating elements - should return the first occurance
circleLeft
	- len array return -1 - the base case
	regular array test - the regular case - make sure it is circled properly
	1 len array makes no change
enumerateRuns
	- len array return -1 - the base case
	test with no repeats - return the length of the string
	test with repeats - return length - number of repeating runs
flip
	- len array return -1 - the base case
	test with one element - should return the same list
	test with odd and even elements - should flip in both situations
locateDifference
	test with either array len -1 - the base case
	test with the same arrays - should return the case where there is no difference
	test with one array less than the other and vice versa - should find the difference also make sure to return the lesser of the two string lengths
subsequence
	test with either array len - the base case
	test with second array len 0 - second base case
	no subsequences - case 1
	one subsequence - case 2
	multiple subsequences - case 3
locateAny
	either leng < 0 return -1
	Regular test data
	test data with none to be located
divide
	test with len < 0
	len = 0
	len = 1
	divisor outside of string

