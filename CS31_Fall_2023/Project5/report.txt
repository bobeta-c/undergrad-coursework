obstacles:
The largest obstacle I faced was determining a method for generating paragraphs when the line length was less than 4 characters long. In the case of 1 or 2 length lines, my method of first getting a c string of either the next word or a string of characters of length l being hte length of the line segment did not work initally. This is due to the fact that for line lengths 1 and 2 My word parser would only get the @ or @P segment of the paragraph break and treat that as a regular word because "@" and "@P" are not equal to "@P@." In the case of line length 3, the word "@P@****" where * is any nonspace character would also produce an opposite error. Because my program would only take the first three letters in this scneario, it would treat @P@*** as @P@ and thus a paragraph even if it would be the incorrect move. To counter this I had to set the minimum buffer size to 5 "@P@*\0" and within the word parser, I had aseries of if statements checking progressively for @P@* and in the error case moving the current space in the file backwards to treat a word such as @Pyo correctly.

Design:
Continuously get the next word from the infile and ouput it to the outfile while keeping track of paragraph breaks, punctuation, hyphens.

Pseudocode:
dynamically allocate memory for word segment
define variable including punctuation, currentline, needtoparagraph, current word length, hyphen, punctuation,
continually:
	get the next word
	check if the word is longer than the line-length
	check if the word is a paragraph break
	update current linelength
	if the word fits:
		paragraph if necessary
		if after a hyphen - outf
		if it isn't following punctuation outf or make a new line if cant fit a space
		if it is following punctuation outf or make a new line if cant fit two spaces
		else - it is the first word of the line and you can just outf the word
	else - the word doesn't fit so make a new line and outf
	reset all of the flags - puncutation, paragraph, hyphen, stupidVariable
	check for punctuation and hyphen
One more newline
delete dynamic memory
return the returnstate

GetWord
get characters
check if there is a space - break
check if there is a hyphen - break
check if there is a starting @
	enter an if chain to check if there is a complete @P@ in the case of a small buffer.


Test Cases
"A @P@ B" l=1 (paragraph break l < 4)
"A @P@ B" l=2 (paragraph break l < 4)
"A @P@B B" l=3 (non-paragraph break l == 3)
"A @P@ B" l=4 (regular paragraph break)
"bad-bugs are not cool" l=4 (return 0 hyphen ends line)
"beat-bugs are cool" l=4 (return 1 hyphen starts line)
"yo. hi: whats up? howdy! sweet" l=40 (punctuation double space)
"hi this is a test @P@" l=40 (paragraph at end)
"@P@ starting paragraph whats up" l=40 (paragraph at beginning)
"It always does seem to me that I am doing more work than
I should do. It is not that I object to the work, mind you;
I like work: it fascinates me.       I can sit and look at it for hours.
I love to keep     it by me: the idea of getting
rid
of it nearly breaks my heart. @P@ You cannot give me too
much work; to accumulate work has almost become


a passion with me: my study is so full of it now, that there is hardly
an inch of room for any more." l=40 (base case to match up with the grader"
My implementation covers all of these base cases.
