1.
	a.
	int main()
	    {
		int arr[3] = { 5, 10, 15 };
		int* ptr = arr;

		*ptr = 30;          // set arr[0] to 30
		*ptr + 1 = 20;      // set arr[1] to 20 BUG!! (compile error)
		ptr += 2;
		ptr[0] = 10;        // set arr[2] to 10

		while (ptr >= arr) BUG (will lead to out of bounds error given ptr--;
		{
		    ptr--; BUG (out of bounds error will occur)
		    cout << *ptr << endl;    // print values BUG (will go backwards)
		}
	    }
	FIXED VERSION
	int main()
	    {
		int arr[3] = { 5, 10, 15 };
		int* ptr = arr;

		*ptr = 30;          // set arr[0] to 30
		*(ptr + 1) = 20;      // set arr[1] to 20
		ptr += 2;
		ptr[0] = 10;        // set arr[2] to 10

		ptr = arr;

		while (ptr-arr < 3)
		{
		    cout << *ptr << endl;    // print values
		    ptr++;
		}
	    }
	
	b.
	This function will not change the actual pointer value. It will instead change a copy of the pointer variable. To make it work the pointer should be passed as a reference or as a pointer to itself. For simplicity, passing it as reference will work.
	void findMax(int arr[], int n, int*& pToMax)
	    {
		if (n <= 0) 
		    return;      // no items, no maximum!
	    
		pToMax = arr;

		for (int i = 1; i < n; i++)
		{
		    if (arr[i] > *pToMax)
			 pToMax = arr + i;
		}
	    } 

	c.
	This main routine may not work because the pointer is undeclared. This may cause it to access memory that is sensitive causing memory leaks or other bugs in the program. A better main routine will either set a variable and then make the pointer point to that variable, or just use a variable and pass its address as the input to the function.
int main()
    {
        int num;
        computeCube(5, &num);
        cout << "Five cubed is " << num << endl;
    }

	d. 
	Problems: str1 != 0 && str2 != 0 should be *str1 != '\0' && *str2 != '\0'  <- end string character this is because the first attempt asked if the memory addresses = 0 which they won't unless they are null pointers, instead we should check if the end of the character string is the end character.
		  str1 != str2 should be *str1 != *str2 because it shouldn't be comparing their addresses, it should be comparing the values associated with the addresses.
		  str1 == str2 should be *str1 == '\0' && *str2 == '\0' to be sure that they end at the same time rather than that 
		
	solution:
	    bool strequal(const char str1[], const char str2[])
	    {
		while (*str1 != '\0'  &&  *str2 != '\0')  // zero bytes at ends
		{
		    if (*str1 != *str2)  // compare corresponding characters
			return false;
		    str1++;            // advance to the next character
		    str2++;
		}
		return (*str1 == '\0' && *str2 == '\0');   // both ended at same time?
	    }

	e.
	This program is incorrectly returning a pointer to a trash value. Although the pointer was pointing to an array of 100 elements, the memory associated with that array is released back to the program as soon as the function is done executing. This causes the behavior of the program to be undefined.

	
2.
        a. double* cat;
        b. double mouse[5];
        c. cat = mouse+4;
        d. *cat = 25;
        e. *(mouse+3)=17;
        f. cat -= 3;
        g. cat[1]  = 42;
        h. cat[0] = 54;
        i. bool d = (cat == mouse);
        j. bool b = *cat == *(cat+1);

3.
	a. 
	double mean(const double* scores, int numScores)
	    {
		const double* ptr = scores;
		double tot = 0;
		int location = 0;
		while (ptr + location != scores + numScores)
		{
		    tot += *(ptr+location);
		    location++;
		}
		return tot/numScores;
	    }
	
	b.
	    const char* findTheChar(const char* str, char chr)
	    {
		for (int k = 0; *(str+k) != 0; k++)
		    if (*(str+k) == chr)
			return str+k;

		return nullptr;
	    }
	c.
	    const char* findTheChar(const char* str, char chr)
	    {
		for (; *(str) != 0; str++)
		    if (*(str) == chr)
			return str;

		return nullptr;
	    }
4.
	The function prints (3, 4, 79, -1, 9, 22, 19) each separated by a new line
	first the array is set to (5, 3, 4, 17, 22, 19)
	the pointer ptr is then set to point at array[0] which is the greater of array[0] and array[2]
	array[0] is set to -1 the array is now (-1, 3, 4, 17, 22, 19)
	the pointer is moved 2 forward to array[2]
	the number one in front of the pointer at array[3] is set to 9 the array is now (-1, 3, 4, 9, 22, 19)
	the element at array[1] is set to 79 making the array (-1, 79, 4, 9, 22, 19)
	3 is sent to cout because it is the difference between the arrays 6th and 3rd element (ptr is pointing at array[2] the third element)
	the next line does nothing because the function swap1 only swaps the local variables
	the first and third elements of array are swapped by swap2 the new array is (4, 72, -1, 9, 22, 19)
	each element of the array is outputted in order outputting the remaining 4, 79, -1, 9, 22, 19 after the 3.

5.
void removeS(char* c)
{
        char* p = c;
        while(*p != '\0'){
                if(*p == 's' || *p == 'S'){
                        while(*p != '\0'){
                                *p = *(p+1);
                                p++;
                        }
                        p=c;
                }
                p++;
        }
}

